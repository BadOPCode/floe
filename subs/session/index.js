#!/usr/bin/env node

/**
 * Manages session controls.
 * This provide a means of storing and retrieving low security small data.
 * Shawn Rapp - 4/13/2015
 */

var plsub = require("party-line-sub"),
    MongoClient = require('mongodb').MongoClient;

var MONGO_URL = 'mongodb://localhost:27017/floe';
var db;
var session_collection = db.collection('sessions');

/**
 * Standard callback.
 *
 * @callback standardCallback
 * @param {Object} error
 * @param {Object} success
 */

plsub.addListeningContext("web.api");
plsub.addListeningContext("api");

plsub.on("request", filterRequests);

MongoClient.connect(MONGO_URL, function(err, db_connection) {
    if (err) {
        plsub.logger.error(err);
        return;
    }
    plsub.logger.log("Connected to Mongo database.");
    db = db_connection;
});

/**
 * Sends a packet to reject the request.
 * @param {Object} request_packet Incoming packet from PL.
 */
function sendNoReponsePacket(request_packet) {
    var noroute_packet = {
        type: "noResponse",
        context: request_packet.from,
        request_id: request_packet.request_id
    };
    plsub.send(noroute_packet);
}

var findSessionById = function(search_id, callback) {
    var search_obj = {
        _id: search_id
    }
    session_collection.findOne(search_obj, function(err, result) {
        if (err) { //error occurred while searching for function
            plsub.logger.error(err);
            callback(err, null);
            return;
        }

        if (!result) { //couldn't find session
            callback(new Error("Session" + result + " does not exist."), null);
            return;
        }

        callback(null, result);
    });
};

/**
 * generateNewSessionObject - Creates a new session object
 * @param {string} ip_address Client IP address.
 * @param {standardCallback} callback Returns back the session ID generated by Mongo
 */
var generateNewSessionObject = function(ip_address, callback) {
    var session_obj = {
        ip_address: ip_address,
        last_seen: new Date().valueOf().toString()
    };
    session_collection.insert(session_obj, function(err, result) {
        callback(err, result.ops._id);
    });
};

var updateSessionObject = function(session_id, update_obj, callback) {
    var search_obj = {
        _id: session_id
    };
    session_collection.update(search_obj, update_obj, function(err, result) {
        callback(err, result.ops);
    });
};

var removeSessionObject = function(session_id, callback) {
    var search_obj = {
        _id: session_id
    };
    session_collection.remove(search_obj, function(err, result) {
        callback(err, result);
    });
};

var cleanSessionObjects = function() {};

/**
 * Filters incoming packet requests for packets only relevant to this sub.
 * @param {Object} request_packet  Incoming packet from PL.
 */
function filterRequests(request_packet) {
    executeRequests(request_packet);
}

/**
 * Translates and fullfills request
 * @param {Object} request_packet Incoming packet from PL.
 */
function executeRequests(request_packet) {
    var decision = {
        "append": function() {},
        "generate": function() {},
        "remove": function() {}
    }[request_packet.type]();
}
